name: CI
on:
  # Don't build on tags, since thos will be created during a release.
  push:
    branches:
  schedule:
    - cron: '0 21 * * 5'
jobs:
  branch_info:
    name: Gather branch info
    runs-on: ubuntu-latest
    outputs:
      branch_name: ${{ steps.branch.outputs.branch }}
      not_default: ${{ steps.branch.outputs.not_default }}
      build_release: ${{ steps.branch.outputs.build_release  }}
    steps:
      - name: set branch info
        id: branch
        run: |
          if [[ "${GITHUB_EVENT_NAME}" == "push" ]]; then
            export BRANCH="${GITHUB_REF##*/}"
          elif [[ "${GITHUB_EVENT_NAME}" == "pull_request" ]]; then
            export BRANCH="${$GITHUB_BASE_REF}"
          else
            echo "unknown event"
          fi
          if [ "$BRANCH" = "main" ]; then
            echo "not_default=false" >> $GITHUB_OUTPUT
            echo "build_release=true" >> $GITHUB_OUTPUT
          elif [[ ${{ github.ref_type  }}  == "tag" ]]; then
            echo "not_default=true" >> $GITHUB_OUTPUT
            echo "build_release=true" >> $GITHUB_OUTPUT
          else
            echo "not_default=true" >> $GITHUB_OUTPUT
            echo "build_release=false" >> $GITHUB_OUTPUT
          fi
          echo "branch=${BRANCH}" >> $GITHUB_OUTPUT
          echo "Output is:"
          cat $GITHUB_OUTPUT
  check_tag:
    name: Check tag
    needs: branch_info
    runs-on: ubuntu-latest
    steps:
      # Conceptually, we only want to run this job iff we are a release.
      # However, this greatly complicates that matrix build.
      # Instead, exit succes on not release, and run my tag logic on release.
      - name: No-op
        if: needs.branch_info.outputs.build_release != true
        run: exit 0
      - name: Check that release tag is well-formatted, and extract the version number
        # Need explity == or the step triggers even if false
        if: needs.branch_info.outputs.build_release == true
        shell: bash
        # Use xargs to trim spaces
        run: |
          if [[ ${{ github.ref_type  }}  == "tag" ]]; then
            tag=$(echo "${{ github.ref_name }}" | grep -Eo "v[0-9]+(\.[0-9]+)*$")
            echo "VERSION_GIT=$(echo "${tag}" | cut -c3- | xargs)" >> $GITHUB_ENV
          fi
      - name: Clone sources to extract project version
        uses: actions/checkout@v4
        if: needs.branch_info.outputs.build_release == true
        # LFS defaults to disabled, but accidental LFS bandwidth would be bad.
        with:
          lfs: 'false'
      - uses: lukka/get-cmake@v3.27.9
        if: needs.branch_info.outputs.build_release == true
      - name: Extract the CMake version
        if: needs.branch_info.outputs.build_release == true
        run: |
          cmake -B build -S . -DONLY=VERSION
          echo "VERSION_CMAKE=$(cat version | xargs)" >> $GITHUB_ENV
      - name: CMake project version == Git tag
        if: needs.branch_info.outputs.build_release == true
        shell: bash
        run: |
          if [[ "$VERSION_CMAKE" != "$VERSION_GIT" ]] ; then
            printf "Mismatched project versions. Git:$VERSION_GIT  CMake:$VERSION_CMAKE\n"
            exit 115 # Use a sufficiently rare exit code to make this failure easy to detect
          fi
  create_icons:
    name: Rasterize SVG icons
    runs-on: ubuntu-latest

    container:
      image: ghcr.io/matthew-mcraven/pepp/image-utils:v0.15.0
    steps:
      - uses: actions/checkout@v4
        # LFS defaults to disabled, but accidental LFS bandwidth would be bad.
        with:
          lfs: 'false'
        # imagemagick is bad at converting images with gradients, so use rsvg-convert.
      - name: Convert SVG to PNG
        run: rsvg-convert -w 256 -h 256 icon.svg -o icon.png
        working-directory: ./data/app_icon
      - name: Convert SVG to ICO
        run: convert icon.png -resize 256x256 icon.ico
        working-directory: ./data/app_icon
      - name: Convert PNG to ICNS
        run: png2icns icon.icns icon.png
        working-directory: ./data/app_icon
      - uses: actions/upload-artifact@v4
        with:
          name: icons
          path: data
          retention-days: 1
  build:
    name: Build ${{ matrix.name }}
    needs: [ branch_info, check_tag, create_icons ]
    uses: ./.github/workflows/build.yml
    strategy:
      fail-fast: true
      # If you want to update images, must replace *ALL* images in the matrix manually.
      # Trying to use `env` or inputs will fail in this context.
      matrix:
        config:
          - { name: "Ubuntu 22.04; GCC", cache_name: 'ubuntu-gcc', runs-on: "ubuntu-latest", image: "ghcr.io/matthew-mcraven/pepp/gcc:v0.15.0", compiler_launcher: "ccache", compiler_c: "", compiler_cpp: "", cmake_generator: "Ninja", artifact_key: "artifact-linux"}
          - { name: "Ubuntu 22.04; GCC + CodeQL", cache_name: 'ubuntu-gcc', runs-on: "ubuntu-latest", image: "ghcr.io/matthew-mcraven/pepp/gcc:v0.15.0", compiler_launcher: "ccache", compiler_c: "", compiler_cpp: "", cmake_generator: "Ninja", codeql: True, variant: 'debug'}
          - { name: "Ubuntu 22.04; Clang 17.0", cache_name: 'ubuntu-clang', runs-on: "ubuntu-latest", image: "ghcr.io/matthew-mcraven/pepp/clang:v0.15.0",  compiler_launcher: "", compiler_c: "clang", compiler_cpp: "clang++" , cmake_generator: "Ninja" }
          - { name: "Ubuntu 22.04; EMSDK 3.1.70", cache_name: 'ubuntu-emsdk', runs-on: "ubuntu-latest", image: "ghcr.io/matthew-mcraven/pepp/wasm:v0.15.0", cmake_toolchain: '$Qt6_DIR/qt.toolchain.cmake', cmake_xargs: '-D QT_HOST_PATH=/qt/6.9.0/gcc_64', release_variant: 'MinSizeRel', debug_variant: 'MinSizeRel' }
          # See: https://bugreports.qt.io/browse/QTBUG-118086
          - { name: "MacOS-15 ARM64", cache_name: 'macos-clang-arm', runs-on: "macos-15" , compiler_launcher: "ccache", compiler_c: 'clang', compiler_cpp: 'clang++', cmake_generator: "Ninja", artifact_key: "artifact-macos-arm", cmake_xargs: '-D CMAKE_OSX_ARCHITECTURES=arm64' }
          - { name: "MacOS-15 x86-64", cache_name: 'macos-clang-x86', runs-on: "macos-15" , compiler_launcher: "ccache", compiler_c: 'clang', compiler_cpp: 'clang++', cmake_generator: "Ninja", artifact_key: "artifact-macos-x86", cmake_xargs: '-D CMAKE_OSX_ARCHITECTURES=x86_64' }
          - { name: "Windows Latest; MSVC", cache_name: 'windows-msvc', runs-on: "windows-latest" , compiler_launcher: "ccache", artifact_key: "artifact-windows"}

    permissions:
      actions: read
      contents: read
      security-events: write
    with:
      name: ${{ matrix.config.name }}
      cache_name: ${{ matrix.config.cache_name }}
      runs-on: ${{ matrix.config.runs-on || 'ubuntu-latest' }}
      image: ${{ matrix.config.image || '' }}
      cmake_xargs: ${{ matrix.config.cmake_xargs || '' }}
      cmake_generator: ${{ matrix.config.cmake_generator || '' }}
      cmake_toolchain: ${{ matrix.config.cmake_toolchain || ''}}
      compiler_launcher: ${{ matrix.config.compiler_launcher || '' }}
      compiler_c: ${{ matrix.config.compiler_c  || '' }}
      compiler_cpp: ${{ matrix.config.compiler_cpp || '' }}
      codeql: ${{ !!matrix.config.codeql }}
      # Allow config to control the magic words passed as -DCMAKE_BUILD_TYPE for both release and debug.
      variant: ${{ needs.branch_info.build_release && (matrix.config.release_variant || 'release' ) || (matrix.config.debug_variant || 'debug' ) }}
      not_default: ${{ needs.branch_info.outputs.not_default == 'true' }}
      images_artifact: 'icons'
      artifact_key: ${{ matrix.config.artifact_key || ''}}
      sign_artifacts: ${{ needs.branch_info.outputs.build_release == 'true'}}
    secrets:
      MAC_BUILD_CERTIFICATE_BASE64: ${{ secrets.MAC_BUILD_CERTIFICATE_BASE64 }}
      MAC_KEYCHAIN_PASSWORD: ${{ secrets.MAC_KEYCHAIN_PASSWORD }}
      MAC_P12_PASSWORD: ${{ secrets.MAC_P12_PASSWORD }}
      MAC_DEVELOPER_NAME: ${{ secrets.MAC_DEVELOPER_NAME }}
      MAC_DEVELOPER_TEAM_ID: ${{ secrets.MAC_DEVELOPER_TEAM_ID }}
      MAC_APPLE_ID: ${{ secrets.MAC_APPLE_ID }}
      MAC_NOTARYTOOL_PASSWORD: ${{ secrets.MAC_NOTARYTOOL_PASSWORD }}

  deploy_prod_pages:
    name: Trigger deployment to production github pages
    if: startsWith(needs.branch_info.outputs.build_release, 'true')
    permissions:
      contents: read
      pages: write
      id-token: write
    needs: [ build, branch_info ]
    uses: ./.github/workflows/deploy-prod-pages.yml

  deploy_test_pages:
    name: Trigger deployment to test github pages
    if: startsWith(needs.branch_info.outputs.build_release, 'false')
    needs: [ build, branch_info ]
    concurrency:
      group: "pages-test"
      cancel-in-progress: false
    environment:
      name: test
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
    - name: Trigger deployment
      # Must sleep to allow the job to start before watching it.
      run: gh -R Matthew-McRaven/pepp-dev workflow run -r main deploy.yml -F workflowID="${{ github.run_id }}" && sleep 5
      env:
        GH_TOKEN: ${{ secrets.DEPLOY_PAT }}
    - name: Await deployment
      # Get most recent run and wait until it is complete.
      run: gh -R Matthew-McRaven/pepp-dev run list --workflow=deploy.yml --json databaseId -q .[0].databaseId | xargs gh -R Matthew-McRaven/pepp-dev run watch
      env:
        GH_TOKEN: ${{ secrets.DEPLOY_PAT }}
  test_wasm_pages:
    needs: [ deploy_test_pages ]
    name: Run WASM UI test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 22
      - name: Install dependencies
        run: npm ci
        working-directory: ./test/web
      - name: Install Playwright Browsers
        run: npx playwright install --with-deps
        working-directory: ./test/web
      - name: Run Playwright tests
        run: npx playwright test
        working-directory: ./test/web
  create_changelog:
    name: Create release changelog
    needs: [ branch_info ]
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source code (shallow)
        uses: actions/checkout@v4
        with:
          submodules: 'false'
          lfs: 'false'
      - name: Generate Changelog
        run: cd scripts && python3 changelog_tools.py to_text --begin ${{ github.ref_name }} ../RELEASE.md
      - name: Upload changelog
        uses: actions/upload-artifact@v4
        with:
           name: changelog
           path: RELEASE.md
           retention-days: 1
           if-no-files-found: error
  create_release:
    name: Create GitHub release
    needs: [ build, branch_info, create_changelog]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Dowload changelog
        uses: actions/download-artifact@v4
        with:
          name: changelog
          path: .
      - name: Dowload artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: artifact-*
          merge-multiple: true
          path: build
      - name: Create release
        uses: softprops/action-gh-release@v2
        with:
          body_path: RELEASE.md
          repository: matthew-mcraven/Pepp
          token: ${{ secrets.GITHUB_TOKEN }}
          tag_name: ${{ github.ref_name }}
          name: ${{ github.ref_name }}
          files: build/*
          make_latest: false

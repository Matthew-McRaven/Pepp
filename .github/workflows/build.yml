name: Build
on:
  workflow_call:
    inputs:
      name: { required: True, type: string }
      cache_name: { type: string }
      runs-on: { required: True, type: string }
      image: { type: string, default: '' }
      cmake_generator: { type: string, default: "" }
      cmake_toolchain: { type: string, required: False }
      cmake_xargs: { type: string }
      ctest_launcher: { type: string, default: "ctest" }
      compiler_launcher: { type: string, default: "" }
      compiler_c: { type: string, default: "" }
      compiler_cpp: { type: string, default: "" }
      codeql: { type: boolean, default: False }
      variant: { type: string, default: "Debug" }
      not_default: { required: True, type: boolean }
      save_cache: { type: boolean, default: True }
      images_artifact: { type: string }
      artifact_key: { type: string, default: "" }
      sign_artifacts: { type: boolean, default: False }
    secrets:
      MAC_BUILD_CERTIFICATE_BASE64:
        description: 'Contains an apple developer cert as a p12, base64 encoded.'
        required: false
      MAC_KEYCHAIN_PASSWORD:
        description: 'Password for keychain in which developer cert will be stored.'
        required: false
      MAC_P12_PASSWORD:
        description: 'Password for build certificate.'
        required: false
      MAC_DEVELOPER_NAME:
        description: 'Developer name for code signing.'
        required: false
      MAC_DEVELOPER_TEAM_ID:
        description: 'Developers team ID for code signing signing.'
        required: false
      MAC_APPLE_ID:
          description: 'Apple ID to use for notarization.'
          required: false
      MAC_NOTARYTOOL_PASSWORD:
          description: 'Application-specific password to use for notarization.'
          required: false

jobs:
  matrix_build:
    name: ${{ inputs.name }}
    runs-on: ${{ inputs.runs-on }}
    timeout-minutes: ${{ inputs.codeql && 360 || 90 }}
    container:
      image: ${{ inputs.image }}
    env:
      DEBIAN_FRONTEND: noninteractive

    steps:
      # Perform shallow clone, which may break some other operations
      # Must exectute before any repo-local actions
      - name: Checkout source code (shallow)
        uses: actions/checkout@v4
        with:
          submodules: 'true'
          # LFS defaults to disabled, but accidental LFS bandwidth would be bad.
          lfs: 'false'
      # Local github runner doesn't have node installed.
      - if: env.ACT
        name: Install Node if running locally using `nektos/act`
        uses: ./.github/actions/install-node
      # Must do a bunch of work to enable signing on MacOS.
      # https://docs.github.com/en/actions/deployment/deploying-xcode-applications/installing-an-apple-certificate-on-macos-runners-for-xcode-development
      # WARNING: If we switch to self-hosted runners, must clean up the certs ourselves.
      - name: Import Apple Certificate
        if: ${{ contains(inputs.name, 'MacOS') }}
        run: |
          CERTIFICATE_PATH=$RUNNER_TEMP/cert.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          echo -n "$MAC_BUILD_CERTIFICATE_BASE64" | base64 --decode > $CERTIFICATE_PATH
          security create-keychain -p "$MAC_KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$MAC_KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security import $CERTIFICATE_PATH -P "$MAC_P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security show-keychain-info $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
          security find-identity -v -p codesigning $KEYCHAIN_PATH
          security find-certificate -a -p -c $CERTIFICATE_PATH $KEYCHAIN_PATH
        env:
          MAC_BUILD_CERTIFICATE_BASE64: ${{ secrets.MAC_BUILD_CERTIFICATE_BASE64 }}
          MAC_KEYCHAIN_PASSWORD: ${{ secrets.MAC_KEYCHAIN_PASSWORD }}
          MAC_P12_PASSWORD: ${{ secrets.MAC_P12_PASSWORD }}

      # Install dependencies based on enabled features
      - name: Install Qt+CMake in non-containerized builds
        if: inputs.image  == ''
        uses: ./.github/actions/install-qt-cmake
        with:
          cache-key-prefix: install-qt-${{ inputs.runs-on }}

      - name: Add QTIFW to path
        if: inputs.runs-on == 'windows-latest'
        shell: bash
        run: echo "$RUNNER_WORKSPACE/Qt/Tools/QtInstallerFramework/4.7/bin" >>$GITHUB_PATH

      # Prevent clang from using ccache, because it is profiling build times
      - name: Enable caching object files between builds
        # Disable ccache when running locally
        if: inputs.compiler_launcher == 'ccache' && !env.ACT
        uses: hendrikmuhs/ccache-action@v1.2.17
        with:
          verbose: 2
          key: ${{ inputs.cache_name || inputs.name }}
          restore: ${{ inputs.not_default }}
          save: ${{ inputs.save_cache }}

      # Initializes the CodeQL tools for scanning. Must occur before code is built.
      - name: Initialize CodeQL
        if: inputs.codeql && !env.ACT
        uses: github/codeql-action/init@v3
        with:
          languages: "c-cpp"

      - name: Download converted images and icons
        uses: actions/download-artifact@v4
        if: inputs.images_artifact
        with:
          name: ${{ inputs.images_artifact }}
          path: data

      # Run after downloading image assets, since that seems to nuke my lfs checkout.
      - name: Download help images via LFS
        # Always needed for WASM build because they go to the web. Deployments need help images too.
        if: ${{ contains(inputs.name, 'EMSDK') || inputs.sign_artifacts}}
        shell: bash
        # In the future, may want to filter to specific file extensions to reduce LFS BW.
        run: |
          git config --global --add safe.directory "$GITHUB_WORKSPACE"
          git lfs install --local
          git lfs pull --include="data/help_images/**"
          ls -lahR data/help_images

      - name: Configure CMake
        shell: bash
        run: >
          ${{ contains(inputs.name, 'EMSDK') && 'source /emsdk/emsdk_env.sh &&' || '' }}
          cmake
          -B build -S .
          ${{ inputs.cmake_generator && format('-G {0}', inputs.cmake_generator) || '' }}
          ${{ inputs.compiler_launcher && format('-D CMAKE_C_COMPILER_LAUNCHER={0}', inputs.compiler_launcher) || '' }}
          ${{ inputs.compiler_launcher && format('-D CMAKE_CXX_COMPILER_LAUNCHER={0}', inputs.compiler_launcher) || '' }}
          ${{ inputs.compiler_c && format('-D CMAKE_C_COMPILER={0}', inputs.compiler_c) || '' }}
          ${{ inputs.compiler_cpp && format('-D CMAKE_CXX_COMPILER={0}', inputs.compiler_cpp) || '' }}
          ${{ inputs.cmake_toolchain && format('-D CMAKE_TOOLCHAIN_FILE={0}', inputs.cmake_toolchain) || ''}}
          ${{ inputs.cmake_generator && format('-G {0}', inputs.cmake_generator) || '' }}
          ${{ inputs.cmake_xargs }}
          -D CMAKE_BUILD_TYPE=${{inputs.variant}} -D MAC_DEVELOPER_NAME="$DEVELOPER_NAME"
          -D CPACK_BUILD_CONFIG=${{inputs.variant}} -D CMAKE_INSTALL_PREFIX=./install
        env:
          DEVELOPER_NAME: ${{ secrets.MAC_DEVELOPER_TEAM_ID }}


      - name: Run build
        run: cmake --build build -j6 ${{ contains(inputs.name, 'MSVC') && format('--config {0}', inputs.variant) ||'' }}

      - name: Rename HTML
        if: ${{ contains(inputs.name, 'EMSDK') }}
        run: |
          cp www/pwa/index.html build/output/index.html
          cp www/pwa/manifest.json build/output/manifest.json
          cp www/pwa/serviceworker.js build/output/serviceworker.js

      - name: Replace default Qt logo
        if: ${{ contains(inputs.name, 'EMSDK') }}
        run: mv data/app_icon/icon.svg build/output/qtlogo.svg
      - name: Copy favicon
        if: ${{ contains(inputs.name, 'EMSDK') }}
        run: |
          mv data/app_icon/icon.ico build/output/favicon.ico
          mv data/app_icon/icon.png build/output/favicon.png
      - name: Gather WASM build artifacts
        uses: actions/upload-artifact@v4
        if: ${{ contains(inputs.name, 'EMSDK') }}
        with:
           name: wasm-artifacts
           # TODO: replace fake logo with real Pepp one.
           path: |
             build/output/index.html
             build/output/manifest.json
             build/output/serviceworker.js
             build/output/pepp.js
             build/output/pepp.wasm
             build/output/pepp.wasm.map
             build/output/qtloader.js
             build/output/qtlogo.svg
             build/output/favicon.ico
             build/output/favicon.png
           retention-days: 1
           if-no-files-found: error

      - name: Run cpack
        shell: bash
        if: ${{ !contains(inputs.name, 'EMSDK') }}
        working-directory: build
        run: ls -lah && cpack -c ${{inputs.variant}} && ls -lah

      - name: Codesign Mac OS DMG
        shell: bash
        if: ${{ contains(inputs.name, 'MacOS') }}
        working-directory: build
        run: |
          echo "Verify code signing on application bundle"
          find _CPack_Packages -name "*.app" -print0 | xargs -0 -n1 codesign --verify -vvv
          echo "Sign application disk image"
          find . -maxdepth 1   -name "*.dmg" -print0 | xargs -0 -n1 codesign --force --deep -fvvv --options=runtime --timestamp -s "$DEVELOPER_NAME"
          echo "Verify code signing on application disk image"
          find . -maxdepth 1   -name "*.dmg" -print0 | xargs -0 -n1 codesign --verify -vvv
        env:
          DEVELOPER_NAME: ${{ secrets.MAC_DEVELOPER_NAME }}

      - name: Notarize Mac OS DMG
        shell: bash
        if: ${{ contains(inputs.name, 'MacOS') && inputs.sign_artifacts }}
        working-directory: build
        # WARNING: Limited to 75 notarizations per day, which is ~37 commits+PRs per day
        run: |
          find . -maxdepth 1   -name "*.dmg" -print0 | xargs -0 -n1 xcrun notarytool submit --wait  --apple-id "$APPLE_ID" --password $NOTARY_PWD --team-id $DEVELOPER_TEAM_ID
          find . -maxdepth 1   -name "*.dmg" -print0 | xargs -0 -n1 xcrun stapler staple
        env:
          DEVELOPER_TEAM_ID: ${{ secrets.MAC_DEVELOPER_TEAM_ID }}
          APPLE_ID: ${{ secrets.MAC_APPLE_ID }}
          NOTARY_PWD: ${{ secrets.MAC_NOTARYTOOL_PASSWORD }}

      # Run tests, sign outputs, and upload artifacts
      - name: Run tests
        if: inputs.ctest_launcher
        run: ${{ inputs.ctest_launcher }} --test-dir build -j6 --output-on-failure ${{ contains(inputs.name, 'MSVC') && format('-C {0}', inputs.variant) || '-C Debug' }}
        env:
          # Must be offscreen, or tests that involve GUI libraries will fail
          QT_QPA_PLATFORM: 'offscreen'
          CTEST_OUTPUT_ON_FAILURE: 'TRUE'
      - run: ls build

      - name: Upload assets
        if: ${{ inputs.artifact_key }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.artifact_key }}
          path: |
            build/*.dmg
            build/*.exe
            build/*.tar.gz
          retention-days: 1

      - name: Analyze buildtime for Linux-Clang
        if: inputs.runs-on == 'ubuntu-latest' && inputs.compiler_c == 'clang'
        uses: ./.github/actions/analyze-buildtime

      - name: Perform CodeQL analysis
        if: inputs.codeql && !env.ACT
        uses: ./.github/actions/run-codeql

      - name: Clean up keychain and provisioning profile
        if: ${{ contains(inputs.name, 'MacOS') }}
        run: security delete-keychain $RUNNER_TEMP/app-signing.keychain-db
